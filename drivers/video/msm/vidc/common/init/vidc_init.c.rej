--- drivers/video/msm/vidc/common/init/vidc_init.c	2013-04-20 02:33:28.207487145 -0700
+++ drivers/video/msm/vidc/common/init/vidc_init.c	2013-04-20 02:30:38.461086501 -0700
@@ -465,7 +548,7 @@
 
 	if (!client_ctx)
 		return false;
-
+	mutex_lock(&client_ctx->enrty_queue_lock);
 	if (buffer == BUFFER_TYPE_INPUT) {
 		buf_addr_table = client_ctx->input_buf_addr_table;
 		num_of_buffers = client_ctx->num_of_input_buffers;
@@ -504,26 +587,31 @@
 		*pmem_fd = buf_addr_table[i].pmem_fd;
 		*file = buf_addr_table[i].file;
 		*buffer_index = i;
-
-		if (search_with_user_vaddr)
+/*HTC_START*/
+		if (search_with_user_vaddr) {
 			DBG("kernel_vaddr = 0x%08lx, phy_addr = 0x%08lx "
 			" pmem_fd = %d, struct *file	= %p "
 			"buffer_index = %d\n", *kernel_vaddr,
 			*phy_addr, *pmem_fd, *file, *buffer_index);
-		else
+		} else {
 			DBG("user_vaddr = 0x%08lx, phy_addr = 0x%08lx "
 			" pmem_fd = %d, struct *file	= %p "
 			"buffer_index = %d\n", *user_vaddr, *phy_addr,
 			*pmem_fd, *file, *buffer_index);
+			}
+		mutex_unlock(&client_ctx->enrty_queue_lock);
 		return true;
 	} else {
-		if (search_with_user_vaddr)
+		if (search_with_user_vaddr) {
 			DBG("%s() : client_ctx = %p user_virt_addr = 0x%08lx"
 			" Not Found.\n", __func__, client_ctx, *user_vaddr);
-		else
+		} else {
 			DBG("%s() : client_ctx = %p kernel_virt_addr = 0x%08lx"
 			" Not Found.\n", __func__, client_ctx,
 			*kernel_vaddr);
+			}
+/*HTC_END*/
+		mutex_unlock(&client_ctx->enrty_queue_lock);
 		return false;
 	}
 }
@@ -543,10 +631,11 @@
 	struct msm_mapped_buffer *mapped_buffer = NULL;
 	size_t ion_len;
 	struct ion_handle *buff_ion_handle = NULL;
+	unsigned long ionflag = 0;
 
 	if (!client_ctx || !length)
 		return false;
-
+	mutex_lock(&client_ctx->enrty_queue_lock);
 	if (buffer == BUFFER_TYPE_INPUT) {
 		buf_addr_table = client_ctx->input_buf_addr_table;
 		num_of_buffers = &client_ctx->num_of_input_buffers;
@@ -563,7 +652,7 @@
 	if (*num_of_buffers == max_num_buffers) {
 		ERR("%s(): Num of buffers reached max value : %d",
 			__func__, max_num_buffers);
-		return false;
+		goto bail_out_add;
 	}
 
 	i = 0;
@@ -574,28 +663,35 @@
 		DBG("%s() : client_ctx = %p."
 			" user_virt_addr = 0x%08lx already set",
 			__func__, client_ctx, user_vaddr);
-		return false;
+		goto bail_out_add;
 	} else {
 		if (!vcd_get_ion_status()) {
 			if (get_pmem_file(pmem_fd, &phys_addr,
 					kernel_vaddr, &len, &file)) {
 				ERR("%s(): get_pmem_file failed\n", __func__);
-				return false;
+				goto bail_out_add;
 			}
 			put_pmem_file(file);
 		} else {
 			buff_ion_handle = ion_import_fd(
 				client_ctx->user_ion_client, pmem_fd);
-			if (!buff_ion_handle) {
+			if (IS_ERR_OR_NULL(buff_ion_handle)) {
 				ERR("%s(): get_ION_handle failed\n",
 				 __func__);
+				goto bail_out_add;
+			}
+			if (ion_handle_get_flags(client_ctx->user_ion_client,
+						buff_ion_handle,
+						&ionflag)) {
+				ERR("%s():ION flags fail\n",
+				 __func__);
 				goto ion_error;
 			}
 			*kernel_vaddr = (unsigned long)
 				ion_map_kernel(
 				client_ctx->user_ion_client,
 				buff_ion_handle,
-				0);
+				ionflag);
 			if (!(*kernel_vaddr)) {
 				ERR("%s():ION virtual addr fail\n",
 				 __func__);
@@ -619,7 +715,7 @@
 		sizeof(vidc_mmu_subsystem)/sizeof(unsigned int));
 		if (IS_ERR(mapped_buffer)) {
 			pr_err("buffer map failed");
-			return false;
+			goto ion_error;
 		}
 		buf_addr_table[*num_of_buffers].client_data = (void *)
 			mapped_buffer;
@@ -632,17 +728,25 @@
 		buf_addr_table[*num_of_buffers].phy_addr = phys_addr;
 		buf_addr_table[*num_of_buffers].buff_ion_handle =
 						buff_ion_handle;
+#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
+		buf_addr_table[*num_of_buffers].buff_ion_flag =
+						ionflag;
+#endif
 		*num_of_buffers = *num_of_buffers + 1;
 		DBG("%s() : client_ctx = %p, user_virt_addr = 0x%08lx, "
-			"kernel_vaddr = 0x%08lx inserted!", __func__,
-			client_ctx, user_vaddr, *kernel_vaddr);
+			"kernel_vaddr = 0x%08lx phys_addr=%lu inserted!",
+			__func__, client_ctx, user_vaddr, *kernel_vaddr,
+			phys_addr);
 	}
+	mutex_unlock(&client_ctx->enrty_queue_lock);
 	return true;
 ion_error:
 	if (*kernel_vaddr)
 		ion_unmap_kernel(client_ctx->user_ion_client, buff_ion_handle);
-	if (buff_ion_handle)
+	if (!IS_ERR_OR_NULL(buff_ion_handle))
 		ion_free(client_ctx->user_ion_client, buff_ion_handle);
+bail_out_add:
+	mutex_unlock(&client_ctx->enrty_queue_lock);
 	return false;
 }
 EXPORT_SYMBOL(vidc_insert_addr_table);
@@ -658,7 +762,7 @@
 
 	if (!client_ctx)
 		return false;
-
+	mutex_lock(&client_ctx->enrty_queue_lock);
 	if (buffer == BUFFER_TYPE_INPUT) {
 		buf_addr_table = client_ctx->input_buf_addr_table;
 		num_of_buffers = &client_ctx->num_of_input_buffers;
@@ -669,7 +773,7 @@
 	}
 
 	if (!*num_of_buffers)
-		return false;
+		goto bail_out_del;
 
 	i = 0;
 	while (i < *num_of_buffers &&
@@ -679,7 +783,7 @@
 		pr_err("%s() : client_ctx = %p."
 			" user_virt_addr = 0x%08lx NOT found",
 			__func__, client_ctx, user_vaddr);
-		return false;
+		goto bail_out_del;
 	}
 	msm_subsystem_unmap_buffer(
 	(struct msm_mapped_buffer *)buf_addr_table[i].client_data);
@@ -713,7 +817,11 @@
 	DBG("%s() : client_ctx = %p."
 		" user_virt_addr = 0x%08lx is found and deleted",
 		__func__, client_ctx, user_vaddr);
+	mutex_unlock(&client_ctx->enrty_queue_lock);
 	return true;
+bail_out_del:
+	mutex_unlock(&client_ctx->enrty_queue_lock);
+	return false;
 }
 EXPORT_SYMBOL(vidc_delete_addr_table);
 
