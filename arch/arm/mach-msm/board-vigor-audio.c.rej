--- arch/arm/mach-msm/board-vigor-audio.c	2013-04-20 02:33:28.183486808 -0700
+++ arch/arm/mach-msm/board-vigor-audio.c	2013-04-20 02:30:35.365042796 -0700
@@ -15,83 +15,87 @@
 
 #include <linux/android_pmem.h>
 #include <linux/mfd/pmic8058.h>
-#include <linux/mfd/marimba.h>
 #include <linux/delay.h>
 #include <linux/pmic8058-othc.h>
 #include <linux/spi/spi_aic3254.h>
+#include <linux/regulator/consumer.h>
 
 #include <mach/gpio.h>
 #include <mach/dal.h>
 #include <mach/tpa2051d3.h>
-#include <mach/qdsp6v2_1x/snddev_icodec.h>
-#include <mach/qdsp6v2_1x/snddev_ecodec.h>
-#include <mach/qdsp6v2_1x/snddev_hdmi.h>
-#include <mach/qdsp6v2_1x/apr_audio.h>
-#include <mach/qdsp6v2_1x/q6asm.h>
+#include "qdsp6v2/snddev_icodec.h"
+#include "qdsp6v2/snddev_ecodec.h"
+#include "qdsp6v2/snddev_hdmi.h"
+#include <mach/qdsp6v2/audio_dev_ctl.h>
+#include <sound/apr_audio.h>
+#include <sound/q6asm.h>
 #include <mach/htc_acoustic_8x60.h>
+#include <mach/board_htc.h>
 
-#include "board-vigor-audio-data.h"
-#include <mach/qdsp6v2_1x/audio_dev_ctl.h>
+#include "board-vigor.h"
 
-static struct mutex bt_sco_lock;
-static struct mutex mic_lock;
-static int curr_rx_mode;
-static atomic_t aic3254_ctl = ATOMIC_INIT(0);
-static atomic_t q6_effect_mode = ATOMIC_INIT(-1);
+#define PM8058_GPIO_BASE					NR_MSM_GPIOS
+#define PM8058_GPIO_PM_TO_SYS(pm_gpio)		(pm_gpio + PM8058_GPIO_BASE)
 
-#define BIT_SPEAKER	(1 << 0)
-#define BIT_HEADSET	(1 << 1)
+#define BIT_SPEAKER		(1 << 0)
+#define BIT_HEADSET		(1 << 1)
 #define BIT_RECEIVER	(1 << 2)
-#define BIT_FM_SPK	(1 << 3)
-#define BIT_FM_HS	(1 << 4)
-#define VIGOR_AUD_CODEC_RST        (67)
-#define VIGOR_AUD_HP_EN          PMGPIO(18)
-#define VIGOR_AUD_MIC_SEL        PMGPIO(26)
-#define PM8058_GPIO_BASE			NR_MSM_GPIOS
-#define PM8058_GPIO_PM_TO_SYS(pm_gpio)		(pm_gpio + PM8058_GPIO_BASE)
-#define PMGPIO(x) (x-1)
+#define BIT_FM_SPK		(1 << 3)
+#define BIT_FM_HS		(1 << 4)
+
 void vigor_snddev_bmic_pamp_on(int en);
+
 static uint32_t msm_aic3254_reset_gpio[] = {
 	GPIO_CFG(VIGOR_AUD_CODEC_RST, 0, GPIO_CFG_OUTPUT,
 		GPIO_CFG_PULL_UP, GPIO_CFG_8MA),
 };
 
+static struct mutex mic_lock;
+static atomic_t q6_effect_mode = ATOMIC_INIT(-1);
+static int curr_rx_mode;
+static atomic_t aic3254_ctl = ATOMIC_INIT(0);
+
 void vigor_snddev_poweramp_on(int en)
 {
 	pr_aud_info("%s %d\n", __func__, en);
 	if (en) {
 		msleep(50);
-		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN),
-						"AUD_HP_EN");
+		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), "AUD_HP_EN");
 		gpio_direction_output(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), 1);
 		set_speaker_amp(1);
 		if (!atomic_read(&aic3254_ctl))
 			curr_rx_mode |= BIT_SPEAKER;
 	} else {
 		set_speaker_amp(0);
-		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN),
-						"AUD_HP_EN");
+		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), "AUD_HP_EN");
 		gpio_direction_output(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), 0);
 		if (!atomic_read(&aic3254_ctl))
 			curr_rx_mode &= ~BIT_SPEAKER;
 	}
 }
 
+void vigor_snddev_usb_headset_pamp_on(int en)
+{
+	pr_aud_info("%s %d\n", __func__, en);
+	if (en) {
+	} else {
+	}
+}
+
+
 void vigor_snddev_hsed_pamp_on(int en)
 {
 	pr_aud_info("%s %d\n", __func__, en);
 	if (en) {
 		msleep(50);
-		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN),
-						"AUD_HP_EN");
+		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), "AUD_HP_EN");
 		gpio_direction_output(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), 1);
 		set_headset_amp(1);
 		if (!atomic_read(&aic3254_ctl))
 			curr_rx_mode |= BIT_HEADSET;
 	} else {
 		set_headset_amp(0);
-		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN),
-						"AUD_HP_EN");
+		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), "AUD_HP_EN");
 		gpio_direction_output(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), 0);
 		if (!atomic_read(&aic3254_ctl))
 			curr_rx_mode &= ~BIT_HEADSET;
@@ -103,8 +107,7 @@
 	pr_aud_info("%s %d\n", __func__, en);
 	if (en) {
 		msleep(50);
-		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN),
-						"AUD_HP_EN");
+		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), "AUD_HP_EN");
 		gpio_direction_output(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), 1);
 		set_speaker_headset_amp(1);
 		if (!atomic_read(&aic3254_ctl)) {
@@ -113,8 +116,7 @@
 		}
 	} else {
 		set_speaker_headset_amp(0);
-		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN),
-						"AUD_HP_EN");
+		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), "AUD_HP_EN");
 		gpio_direction_output(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), 0);
 		if (!atomic_read(&aic3254_ctl)) {
 			curr_rx_mode &= ~BIT_SPEAKER;
@@ -154,7 +150,9 @@
 	int ret;
 
 	pr_aud_info("%s %d\n", __func__, en);
+	
 	vigor_snddev_bmic_pamp_on(en);
+	
 	if (en) {
 		ret = pm8058_micbias_enable(OTHC_MICBIAS_0, OTHC_SIGNAL_ALWAYS_ON);
 		if (ret)
@@ -164,6 +162,7 @@
 		ret = pm8058_micbias_enable(OTHC_MICBIAS_0, OTHC_SIGNAL_OFF);
 		if (ret)
 			pr_aud_err("%s: Enabling int mic power failed\n", __func__);
+
 	}
 }
 
@@ -177,10 +176,7 @@
 		ret = pm8058_micbias_enable(OTHC_MICBIAS_1, OTHC_SIGNAL_ALWAYS_ON);
 		if (ret)
 			pr_aud_err("%s: Enabling back mic power failed\n", __func__);
-
-		/* select internal mic path */
-		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_MIC_SEL),
-						"AUD_MIC_SEL");
+		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_MIC_SEL), "AUD_MIC_SEL");
 		gpio_direction_output(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_MIC_SEL), 0);
 	} else {
 		ret = pm8058_micbias_enable(OTHC_MICBIAS_1, OTHC_SIGNAL_OFF);
@@ -189,18 +185,6 @@
 	}
 }
 
-void vigor_snddev_emic_pamp_on(int en)
-{
-	pr_aud_info("%s %d\n", __func__, en);
-
-	if (en) {
-		/* select external mic path */
-		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_MIC_SEL),
-						"AUD_MIC_SEL");
-		gpio_direction_output(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_MIC_SEL), 1);
-	}
-}
-
 void vigor_snddev_stereo_mic_pamp_on(int en)
 {
 	int ret;
@@ -216,34 +200,41 @@
 		if (ret)
 			pr_aud_err("%s: Enabling back mic power failed\n", __func__);
 
-		/* select external mic path */
 		gpio_set_value(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_MIC_SEL), 0);
 	} else {
 		ret = pm8058_micbias_enable(OTHC_MICBIAS_0, OTHC_SIGNAL_OFF);
 		if (ret)
 			pr_aud_err("%s: Disabling int mic power failed\n", __func__);
 
-
 		ret = pm8058_micbias_enable(OTHC_MICBIAS_1, OTHC_SIGNAL_OFF);
 		if (ret)
 			pr_aud_err("%s: Disabling back mic power failed\n", __func__);
 	}
 }
 
+void vigor_snddev_emic_pamp_on(int en)
+{
+	pr_aud_info("%s %d\n", __func__, en);
+
+	if (en) {
+		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_MIC_SEL), "AUD_MIC_SEL");
+		gpio_direction_output(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_MIC_SEL), 1);
+	}
+}
+
 void vigor_snddev_fmspk_pamp_on(int en)
 {
 	pr_aud_info("%s %d\n", __func__, en);
+
 	if (en) {
-		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN),
-						"AUD_HP_EN");
+		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), "AUD_HP_EN");
 		gpio_direction_output(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), 1);
 		set_speaker_amp(1);
 		if (!atomic_read(&aic3254_ctl))
 			curr_rx_mode |= BIT_FM_SPK;
 	} else {
 		set_speaker_amp(0);
-		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN),
-						"AUD_HP_EN");
+		gpio_request(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), "AUD_HP_EN");
 		gpio_direction_output(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), 0);
 		if (!atomic_read(&aic3254_ctl))
 			curr_rx_mode &= ~BIT_FM_SPK;
@@ -253,6 +244,7 @@
 void vigor_snddev_fmhs_pamp_on(int en)
 {
 	pr_aud_info("%s %d\n", __func__, en);
+
 	if (en) {
 		gpio_set_value(PM8058_GPIO_PM_TO_SYS(VIGOR_AUD_HP_EN), 1);
 		set_headset_amp(1);
@@ -270,17 +262,6 @@
 {
 }
 
-int vigor_get_rx_vol(uint8_t hw, int network, int level)
-{
-	int vol = 0;
-
-	/* to be implemented */
-
-	pr_aud_info("%s(%d, %d, %d) => %d\n", __func__, hw, network, level, vol);
-
-	return vol;
-}
-
 void vigor_rx_amp_enable(int en)
 {
 	if (curr_rx_mode != 0) {
@@ -297,60 +278,34 @@
 			vigor_snddev_fmspk_pamp_on(en);
 		if (curr_rx_mode & BIT_FM_HS)
 			vigor_snddev_fmhs_pamp_on(en);
-		atomic_set(&aic3254_ctl, 0);;
-	}
-}
-
-int vigor_support_aic3254(void)
-{
-	return 1;
-}
-
-int vigor_support_back_mic(void)
-{
-	return 1;
-}
-
-void vigor_get_acoustic_tables(struct acoustic_tables *tb)
-{
-	switch (system_rev) {
-	case 0:
-	case 1:
-		strcpy(tb->tpa2051, "TPA2051_CFG.csv");
-		break;
-	case 2:
-		strcpy(tb->tpa2051, "TPA2051_CFG_XC.csv");
-		break;
-	default:
-		strcpy(tb->tpa2051, "TPA2051_CFG_XC.csv");
-		break;
+		atomic_set(&aic3254_ctl, 0);
 	}
 }
 
 int vigor_support_beats(void)
 {
-	/* this means HW support 1V for beats */
-	/* PCB ID is defined by HW revision
-	 * [0] raised means support 1V headset
-	 * [7-4] set as "1000" stands for PVT device */
 	if (((system_rev&0x1) == 0x1) && ((system_rev>>4&0xF) == 0x8))
 		return 1;
 	else
 		return 0;
 }
 
-void vigor_enable_beats(int en)
+int vigor_support_adie(void)
 {
-	pr_aud_info("%s: %d\n", __func__, en);
-	set_beats_on(en);
+	return 0;
 }
 
-int vigor_is_msm_i2s_slave(void)
+int vigor_support_back_mic(void)
 {
-	/* 1 - CPU slave, 0 - CPU master */
 	return 1;
 }
 
+void vigor_enable_beats(int en)
+{
+	pr_aud_info("%s: %d\n", __func__, en);
+	set_beats_on(en);
+}
+
 void vigor_reset_3254(void)
 {
 	gpio_tlmm_config(msm_aic3254_reset_gpio[0], GPIO_CFG_ENABLE);
@@ -377,42 +332,25 @@
 	.headset_enable	        = vigor_snddev_hsed_pamp_on,
 	.handset_enable	        = vigor_snddev_receiver_pamp_on,
 	.headset_speaker_enable	= vigor_snddev_hs_spk_pamp_on,
-	.bt_sco_enable	        = vigor_snddev_bt_sco_pamp_on,
 	.int_mic_enable         = vigor_snddev_imic_pamp_on,
 	.back_mic_enable        = vigor_snddev_bmic_pamp_on,
 	.ext_mic_enable         = vigor_snddev_emic_pamp_on,
-	.stereo_mic_enable      = vigor_snddev_stereo_mic_pamp_on,
 	.fm_headset_enable      = vigor_snddev_fmhs_pamp_on,
 	.fm_speaker_enable      = vigor_snddev_fmspk_pamp_on,
-	.voltage_on		= vigor_voltage_on,
-};
-
-static struct q6v2audio_icodec_ops iops = {
-	.support_aic3254 = vigor_support_aic3254,
-	.is_msm_i2s_slave = vigor_is_msm_i2s_slave,
-};
-
-static struct q6v2audio_ecodec_ops eops = {
-	.bt_sco_enable  = vigor_snddev_bt_sco_pamp_on,
+	.stereo_mic_enable      = vigor_snddev_stereo_mic_pamp_on,
+	.usb_headset_enable     = vigor_snddev_usb_headset_pamp_on,
+	.voltage_on             = vigor_voltage_on,
 };
 
 static struct aic3254_ctl_ops cops = {
 	.rx_amp_enable        = vigor_rx_amp_enable,
 	.reset_3254           = vigor_reset_3254,
-	.lb_dsp_init          = &LOOPBACK_DSP_INIT_PARAM,
-	.lb_receiver_imic     = &LOOPBACK_Receiver_IMIC_PARAM,
-	.lb_speaker_imic      = &LOOPBACK_Speaker_IMIC_PARAM,
-	.lb_headset_emic      = &LOOPBACK_Headset_EMIC_PARAM,
-	.lb_receiver_bmic     = &LOOPBACK_Receiver_BMIC_PARAM,
-	.lb_speaker_bmic      = &LOOPBACK_Speaker_BMIC_PARAM,
-	.lb_headset_bmic      = &LOOPBACK_Headset_BMIC_PARAM,
 };
 
 static struct acoustic_ops acoustic = {
 	.enable_mic_bias = vigor_mic_enable,
-	.support_aic3254 = vigor_support_aic3254,
+	.support_adie = vigor_support_adie,
 	.support_back_mic = vigor_support_back_mic,
-	.get_acoustic_tables = vigor_get_acoustic_tables,
 	.support_beats = vigor_support_beats,
 	.enable_beats = vigor_enable_beats,
 	.set_q6_effect = vigor_set_q6_effect_mode,
@@ -423,7 +361,6 @@
 	aic3254_set_mode(config, mode);
 }
 
-
 static struct q6v2audio_aic3254_ops aops = {
        .aic3254_set_mode = vigor_aic3254_set_mode,
 };
@@ -434,24 +371,15 @@
 
 void __init vigor_audio_init(void)
 {
-	mutex_init(&bt_sco_lock);
 	mutex_init(&mic_lock);
 
-#ifdef CONFIG_MSM8X60_AUDIO
 	pr_aud_info("%s\n", __func__);
 	htc_8x60_register_analog_ops(&ops);
-	htc_8x60_register_icodec_ops(&iops);
-	htc_8x60_register_ecodec_ops(&eops);
+	htc_register_q6asm_ops(&qops);
 	acoustic_register_ops(&acoustic);
 	htc_8x60_register_aic3254_ops(&aops);
-	htc_8x60_register_q6asm_ops(&qops);
-	msm_set_voc_freq(8000, 8000);
-#endif
-
+	msm_set_voc_freq(8000, 8000);	
 	aic3254_register_ctl_ops(&cops);
 
-	/* PMIC GPIO Init (See board-vigor.c) */
-
-	/* Reset AIC3254 */
 	vigor_reset_3254();
 }
